map :: (a -> b) -> [a] -> [b]
data Either a b = Left a | Right b  

class Functor f where  
    fmap :: (a -> b) -> f a -> f b     

instance Functor [] where  
    fmap = map
map :: (a -> b) -> [a] -> [b]  
ghci> fmap (*2) [1..3]  

instance Functor Maybe where  
    fmap f (Just x) = Just (f x)  
    fmap f Nothing = Nothing  

instance Functor (Either a) where  
    fmap f (Right x) = Right (f x)  
    fmap f (Left x) = Left x    
    
instance Functor IO where  
    fmap f action = do  
        result <- action  
        return (f result)  
 
class (Functor f) => Applicative f where  
    pure :: a -> f a  
    (<*>) :: f (a -> b) -> f a -> f b  

instance Applicative [] where  
    pure x = [x]  
    fs <*> xs = [f x | f <- fs, x <- xs] 

instance Applicative Maybe where  
    pure = Just  
    Nothing <*> _ = Nothing  
    (Just f) <*> j = fmap f j

instance Applicative (Either e) where
    pure          = Right
    Left  e <*> _ = Left e
    Right f <*> r = fmap f r

instance Applicative IO where  
    pure = return  
    a <*> b = do  
        f <- a  
        x <- b  
        return (f x)  
        
class Monad m where 
  return :: a -> m a
  (>>=) :: m a -> a -> m b -> m b

instance Monad [] where
    return x = [x]
    xs >>= f = concat (map f xs)  

instance Monad Maybe where
    return = Just
    Nothing >>= _ = Nothing
    Just a >>= f = f a

instance Monad (Either a) where
    return r = Right r
    (Left l) >>= _ = Left l
    (Right r) >>= f = f r

instance Monad IO where
    return a === ...   -- function from a -> IO a
    m >>== k  === ...   -- executes the I/O action m and binds the value to k's input
    fail s   === ioError (userError s)

    
    
data Tree k = Empty
             |Node k (Tree k) (Tree k)
                      
instance Functor Tree where  
    fmap _ Empty = Empty  
    fmap f (Node x left right) = Node (f x) (fmap f left) (fmap f right)  

instance Applicative Tree where
    pure v = Node v Empty Empty
    Empty <*> _ = Empty
    Node v (f left) (f right) <*> Node k left1 right1 =  
    
class Eq a where  
    (==) :: a -> a -> Bool  
    (/=) :: a -> a -> Bool  
    x == y = not (x /= y)  
    x /= y = not (x == y)

instance (Eq m) => Eq (Maybe m) where  
    Just x == Just y = x == y  
    Nothing == Nothing = True  
    _ == _ = False   
        